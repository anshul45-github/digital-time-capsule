generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  collectionOnChain Boolean @default(false)
  accounts        Account[]
  capsules        Capsule[]
  guardianInvites Capsule[]         @relation("memoryGuardian")
  communities     CommunityMember[]
  groups          GroupMember[]
  posts           Post[]
  sessions        Session[]
  sharedCapsules  Capsule[]         @relation("SharedCapsules")
  earlyUnlocks     EarlyUnlockCondition[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GroupMember {
  id      String  @id @default(cuid())
  userId  String
  groupId String
  admin   Boolean @default(false)
  group   Group   @relation(fields: [groupId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model CommunityMember {
  id          String    @id @default(cuid())
  userId      String
  communityId String
  admin       Boolean   @default(false)
  group       Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, communityId])
}

model Group {
  id             String        @id @default(cuid())
  name           String
  description    String?
  group_size_cap Int
  members        GroupMember[]
  capsules       Capsule[]     @relation("CapsuleToGroup")
}

model Community {
  id          String            @id @default(cuid())
  name        String
  description String?
  joinCode    String
  members     CommunityMember[]
  capsules    Capsule[]         @relation("CapsuleToCommunity")
}

model Capsule {
  id                String                 @id @default(cuid())
  creatorId         String
  caption           String
  tags              String[]
  isPublic          Boolean
  createdAt         DateTime               @default(now())
  finalUnlockDate   DateTime
  mediaType         MediaType
  nftId             String
  openThreshold     Int?
  updatedAt         DateTime               @updatedAt
  eventCreationNum  Int?
  transactionHash   String?
  transactionStatus Boolean
  locationRegion    String?
  openAttempts      Int
  memoryGuardianId  String?
  memoryGuardianWallet String?
  transferable      Boolean
  title             String
  creator           User                   @relation(fields: [creatorId], references: [id])
  memoryGuardian    User?                  @relation("memoryGuardian", fields: [memoryGuardianId], references: [id])
  earlyUnlockDates  EarlyUnlockCondition[]
  sharedCommunities Community[]            @relation("CapsuleToCommunity")
  sharedGroups      Group[]                @relation("CapsuleToGroup")
  sharedUsers       User[]                 @relation("SharedCapsules")
}

model EarlyUnlockCondition {
  id              Int      @id @default(autoincrement())
  unlockDate      DateTime
  requiredPayment Float
  capsuleId       String
  capsule         Capsule  @relation(fields: [capsuleId], references: [id], onDelete: Cascade)
  payees         User[]
}

enum MediaType {
  IMAGE
  TEXT
  VIDEO
  AUDIO
}
