// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts      Account[]
    sessions      Session[]

    capsules      Capsule[]

    groups        GroupMember[]
    communities   CommunityMember[]
    sharedCapsules Capsule[] @relation("SharedCapsules")

    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model GroupMember {
    id     String @id @default(cuid())
    userId String
    groupId String
    admin Boolean @default(false)
    user   User   @relation(fields: [userId], references: [id])
    group  Group  @relation(fields: [groupId], references: [id])

    @@unique([userId, groupId])
}

model CommunityMember {
    id     String @id @default(cuid())
    userId String
    communityId String
    admin Boolean @default(false)
    user   User   @relation(fields: [userId], references: [id])
    group  Community  @relation(fields: [communityId], references: [id])

    @@unique([userId, communityId])
}

model Group {
    id          String   @id @default(cuid())
    name        String
    description String?
    members     GroupMember[]
    capsules    Capsule[]
    group_size_cap  Int
}

model Community {
    id          String   @id @default(cuid())
    name        String
    description String?
    joinCode    String
    members     CommunityMember[]
    capsules    Capsule[]
}

model Capsule {
    id               String                 @id @default(cuid())
    creatorId        String // wallet address of the capsule creator
    creator          User                   @relation(fields: [creatorId], references: [id])
    nftId            String // on-chain NFT identifier
    mediaType        MediaType
    title            String
    caption          String
    tags             String[] // list of tags for search and filtering
    isPublic         Boolean // true if accessible globally; false if private
    finalUnlockDate  DateTime // after which anyone can open the capsule. these are just to show on frontend
    earlyUnlockDates EarlyUnlockCondition[] // list of early unlock conditions. these are just to show on frontend
    locationRegion   String? // extracted region from the location URL (just for showing on the frontend)
    openThreshold    Int? // If this many unique early open attempts occur, auto-open the capsule
    openAttempts     Int // current number of open attempts
    memoryGuardian   String? // Wallet address for the designated guardian for transfers

    transactionStatus Boolean
    transactionHash   String?
    eventCreationNum  Int?

    sharedGroups           Group[]
    sharedCommunities      Community[]
    sharedUsers            User[] @relation("SharedCapsules")

    createdAt        DateTime               @default(now())
    updatedAt        DateTime               @updatedAt
}

enum MediaType {
    IMAGE
    TEXT
    VIDEO
    AUDIO
}

// Early unlock conditions as a separate model instead of composite attribute
model EarlyUnlockCondition {
    id              Int      @id @default(autoincrement())
    unlockDate      DateTime
    requiredPayment Float
    capsuleId       String
    capsule         Capsule  @relation(fields: [capsuleId], references: [id], onDelete: Cascade)
}