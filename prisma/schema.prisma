// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    capsules      Capsule[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Capsule {
    id               String                 @id @default(cuid())
    creatorId        String // wallet address of the capsule creator
    creator          User                   @relation(fields: [creatorId], references: [id])
    nftId            String // on-chain NFT identifier
    mediaUrl         String // Cloudinary URL
    mediaType        MediaType
    caption          String
    tags             String[] // list of tags for search and filtering
    isPublic         Boolean // true if accessible globally; false if private
    allowedUsers     String[] // list of wallet addresses for private capsules
    finalUnlockDate  DateTime // after which anyone can open the capsule
    earlyUnlockDates EarlyUnlockCondition[] // list of early unlock conditions
    locationUrl      String? // Google Maps URL (optional)
    locationRegion   String? // Extracted region from locationUrl
    openThreshold    Int // If this many unique early open attempts occur, auto-open the capsule
    openAttempts     Int                    @default(0) // Counter for unique open attempts
    memoryGuardian   String? // Wallet address for the designated guardian for transfers
    transferable     Boolean // true if the capsule can be transferred to another user
    createdAt        DateTime               @default(now())
    updatedAt        DateTime               @updatedAt
}

enum MediaType {
    IMAGE
    TEXT
    VIDEO
    AUDIO
}

// Early unlock conditions as a separate model instead of composite attribute
model EarlyUnlockCondition {
    id              Int      @id @default(autoincrement())
    unlockDate      DateTime
    requiredPayment Float
    capsuleId       String
    capsule         Capsule  @relation(fields: [capsuleId], references: [id], onDelete: Cascade)
}
